#!/usr/bin/python3
# -*- coding: utf-8 -*-

import asyncio
import time
import cv2
import numpy as np
import base64
from multiprocessing import shared_memory
import websockets
from websockets import WebSocketServerProtocol
import fcntl

# 공유 메모리 설정
SHM_NAME = 'pass_shm'
IMAGE_HEIGHT = 360
IMAGE_WIDTH = 640
IMAGE_CHANNELS = 3
SHM_SIZE = IMAGE_HEIGHT * IMAGE_WIDTH * IMAGE_CHANNELS + 1  # 첫 번째 바이트는 플래그


# 잠금 파일 경로 정의
IMAGE_LOCK_FILE = "/tmp/image_lock"

# 파일 잠금 획득 함수
def acquire_image_lock():
    lockfile_handle = open(IMAGE_LOCK_FILE, "w")
    fcntl.flock(lockfile_handle, fcntl.LOCK_EX)  # 배타적 잠금
    return lockfile_handle

# 파일 잠금 해제 함수
def release_image_lock(lockfile_handle):
    fcntl.flock(lockfile_handle, fcntl.LOCK_UN)
    lockfile_handle.close()


try:
    # 기존 공유 메모리에 연결
    shm = shared_memory.SharedMemory(name=SHM_NAME)
    check = np.ndarray((SHM_SIZE,), dtype=np.uint8, buffer=shm.buf)

except FileNotFoundError:
    # 공유 메모리가 없으면 생성
    shm = shared_memory.SharedMemory(create=True, size=SHM_SIZE, name=SHM_NAME)
    check = np.ndarray((SHM_SIZE,), dtype=np.uint8, buffer=shm.buf)
    check[0] = 0  # 초기 플래그 설정

# 기본 이미지 로드
pimage = cv2.imread('/home/jetson/workspace/setting/aicar.png', cv2.IMREAD_COLOR)

if pimage is None:
    raise FileNotFoundError("기본 이미지 'aicar.png'을(를) 찾을 수 없습니다.")

# 기본 이미지를 JPEG으로 인코딩하고 Base64로 변환
_, pjpeg = cv2.imencode('.jpg', pimage)
default_frame = base64.b64encode(pjpeg.tobytes()).decode('utf-8')
print(f"기본 이미지 크기: {pimage.shape}")

# 업데이트 타임아웃 설정 (초 단위)
UPDATE_TIMEOUT = 10
last_update_time = time.time()

# 단일 클라이언트 연결 관리 변수
connected = False
client_ws: WebSocketServerProtocol = None

# WebSocket 서버 주소 및 포트
HOST = '0.0.0.0'
PORT = 8765


async def send_image_periodically():
    global last_update_time, connected, client_ws

    while True:
        if connected and client_ws is not None:
            current_time = time.time()

            #lockfile_handle = acquire_image_lock()
            try:
                print("read", check[0])
                if check[0] == 1:
                    # 공유 메모리에서 이미지 데이터 추출
                    try:
                        image_data = check[1:].reshape((IMAGE_HEIGHT, IMAGE_WIDTH, IMAGE_CHANNELS))
                        ret, jpeg = cv2.imencode('.jpg', image_data)
                        if ret:
                            # JPEG 이미지를 Base64로 인코딩
                            encoded_image = base64.b64encode(jpeg.tobytes()).decode('utf-8')
                            # 클라이언트에게 인코딩된 이미지 전송
                            await client_ws.send(encoded_image)
                            print("Sent an image frame.")
                            last_update_time = current_time
                        check[0] = 0  # 플래그 초기화
                    except Exception as e:
                        print(f"이미지 처리 또는 전송 오류: {e}")
                        connected = False
                        client_ws = None
                else:
                    # 타임아웃 검사
                    if current_time - last_update_time > UPDATE_TIMEOUT:
                        try:
                            # 기본 이미지를 클라이언트에게 전송
                            await client_ws.send(default_frame)
                            print("Sent default image due to timeout.")
                            last_update_time = current_time
                        except Exception as e:
                            print(f"기본 이미지 전송 오류: {e}")
                            connected = False
                            client_ws = None
            finally:
                # 이미지 잠금 해제
                #release_image_lock(lockfile_handle)
                pass

        await asyncio.sleep(1 / 30)  # 약 30 FPS

async def handler(websocket: WebSocketServerProtocol, path: str):
    global connected, client_ws, last_update_time

    if connected:
        # 이미 클라이언트가 연결되어 있는 경우 연결 거부
        await websocket.close()
        print("추가 클라이언트 연결 시도 거부됨.")
        return

    # 클라이언트 연결 수락
    connected = True
    client_ws = websocket
    last_update_time = time.time()
    print("클라이언트가 연결되었습니다.")

    # 초기 접속 시 기본 이미지 전송
    try:
        await websocket.send(default_frame)
        print("Sent default image upon connection.")
    except Exception as e:
        print(f"기본 이미지 전송 오류: {e}")
        connected = False
        client_ws = None

    try:
        # 클라이언트가 연결을 종료할 때까지 대기
        await websocket.wait_closed()
    except websockets.exceptions.ConnectionClosed as e:
        print(f"클라이언트 연결 종료: {e}")
    finally:
        connected = False
        client_ws = None
        print("클라이언트 연결이 해제되었습니다.")

async def main():
    # WebSocket 서버 시작
    server = await websockets.serve(handler, HOST, PORT)
    print(f"WebSocket 서버가 {HOST}:{PORT}에서 실행 중입니다.")

    # 이미지 전송 백그라운드 태스크 시작
    asyncio.create_task(send_image_periodically())

    # 서버가 종료되지 않도록 대기
    await server.wait_closed()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("서버가 종료되었습니다.")
    finally:
        shm.close()
        # 공유 메모리를 삭제하지 않음. Writer 프로세스에서 삭제하도록 함.

